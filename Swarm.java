import java.util.ArrayList;

/**
 * This class represents a swarm consisting of drones and controlled by pilots.
 * @author ipatel43
 * @author dsehgal34
 * @author skamat36
 * @author tgavaletz
 * @author jpark3068
 * @version 1.0
 */
public class Swarm {
    private Drone leader;
    private ArrayList<Drone> followers;

    /**
     * Instantiates a Swarm object.
     * @param leader Represents the leader of the swarm
     */
    public Swarm (Drone leader) {
        this.leader = leader;
        followers = new ArrayList<>();
    }

    /**
     * Adds a drone to the swarm.
     * @param newDrone Represents the drone being added to the swarm
     */
    public void addDroneToSwarm(Drone newDrone) {
        followers.add(newDrone);
    }

    /**
     * Checks if a drone is present in a swarm
     * @param droneTag Represents the identifier of the drone to be checked
     * @return Returns a boolean value indicating if the drone is present in the swarm
     */
    public boolean checkDrone(Integer droneTag) {
        if(leader.getDroneTag().equals(droneTag)) {
            return true;
        }
        for(int i = 0; i < followers.size(); i++) {
            if(followers.get(i).getDroneTag().equals(droneTag)) {
                return true;
            }
        }
        return false;
    }

    /**
     * Collects revenue from the swarm.
     * @return Returns the total revenue generated by the swarm
     */
    public int collectRevenue() {
        int revenue = leader.getMoneyEarned();
        leader.resetMoney();
        for (Drone drone : followers) {
            revenue += drone.getMoneyEarned();
            drone.resetMoney();
        }
        return revenue;
    }

    /**
     * Removes a drone from the swarm.
     * @param removeDrone Represents the drone to be removed.
     */
    public void removeDroneFromSwarm(Drone removeDrone) {
        //need to make sure the drone is actually part of the swarm
        followers.remove(removeDrone);
    }

    @Override
    public String toString() {
        return leader.toString();
    }

    /**
     * Flies a swarm to a location.
     * @param destination Represents the location the swarm is attempting to fly to
     * @param service Represents the service the swarm belongs to
     */
    public void flySwarm(Location destination, DeliveryService service) {
        if (ErrorHandle.checkSwarmFlight(destination, service, this)) {
            service.fly(destination, leader);
            for(int i = 0; i < followers.size(); i++) {
                service.fly(destination, followers.get(i));
            }
            service.getPilotThatControlsLeader(leader).updateExperience(1);
            System.out.println("OK:change_completed");
        }
    }

    /**
     * Setter for the leader variable.
     * @param leader Represents the new leader of the swarm
     */
    public void newLeader(Drone leader) {
        //Need to check validaty of drone
        this.leader = leader;
    }

    //public void changePilot(Pilot newPilot) {
        //need to check validaty of pilot
        //this.pilotedBy = newPilot;
    //}**/

    /**
     * Getter for the leader variable.
     * @return Returns the leader variable
     */
    public Drone getLeader() {
        return leader;
    }

    /**
     * Getter for the followers variable.
     * @return Returns the followers variable
     */
    public ArrayList<Drone> getFollowers() {
        return followers;
    }

    /**
     * Gets the location of the swarm.
     * @return Returns the location of the swarm
     */
    public Location getLoc() {
        return leader.getCurrentLoc();
    }

    /**
     * Gets a drone present in the swarm.
     * @param droneTag Represents the identifier of the drone to be retrieved
     * @return Returns the desired drone
     */
    public Drone getDrone(Integer droneTag) {
        if (leader.getDroneTag().equals(droneTag)) {
            return leader;
        } else {
            for(Drone temp : followers) {
                if(temp.getDroneTag().equals(droneTag)) {
                    return temp;
                }
            }
        }
        return null;
    }
}
